import os
import re
import logging
from datetime import datetime, timedelta
from io import BytesIO
from typing import List
import urllib.parse

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")

WORKOUT_TYPES = {
    "–±–µ–≥":      {"emoji": "üèÉ", "name": "Running",  "name_ru": "–ë–µ–≥"},
    "–ø–ª–∞–≤–∞–Ω–∏–µ": {"emoji": "üèä", "name": "Swimming", "name_ru": "–ü–ª–∞–≤–∞–Ω–∏–µ"},
    "–≤–µ–ª–æ":     {"emoji": "üö¥", "name": "Cycling",  "name_ru": "–í–µ–ª–æ—Å–∏–ø–µ–¥"},
}

DAY_MAPPING = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"num": 1, "name_ru": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
    "–≤—Ç–æ—Ä–Ω–∏–∫":     {"num": 2, "name_ru": "–í—Ç–æ—Ä–Ω–∏–∫"},
    "—Å—Ä–µ–¥–∞":       {"num": 3, "name_ru": "–°—Ä–µ–¥–∞"},
    "—á–µ—Ç–≤–µ—Ä–≥":     {"num": 4, "name_ru": "–ß–µ—Ç–≤–µ—Ä–≥"},
    "–ø—è—Ç–Ω–∏—Ü–∞":     {"num": 5, "name_ru": "–ü—è—Ç–Ω–∏—Ü–∞"},
    "—Å—É–±–±–æ—Ç–∞":     {"num": 6, "name_ru": "–°—É–±–±–æ—Ç–∞"},
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": {"num": 0, "name_ru": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"},
}


class Training:
    def __init__(
        self,
        day_name: str,
        time: str,
        workout_type: dict,
        description: str,
        location: str,
        waze_link: str = "",
    ):
        self.day_name = day_name
        self.time = time
        self.workout_type = workout_type
        self.description = description
        self.location = location
        self.waze_link = waze_link
        self.selected = True
        self.date = self._calculate_date()

    def _calculate_date(self) -> datetime:
        today = datetime.now()
        wd = today.weekday()  # Monday=0 ... Sunday=6
        info = DAY_MAPPING[self.day_name]
        # Telegram format: Sunday num=0 ‚Üí Python Sunday=6
        target = 6 if info["num"] == 0 else info["num"] - 1
        days_ahead = (target - wd) % 7 or 7
        return today + timedelta(days=days_ahead)

    def to_ics(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .ics –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
        start_dt = self.date.replace(
            hour=int(self.time.split(":")[0]),
            minute=int(self.time.split(":")[1]),
            second=0,
        )
        end_dt = start_dt + timedelta(hours=1, minutes=30)

        start_str = start_dt.strftime("%Y%m%dT%H%M%S")
        end_str   = end_dt.strftime("%Y%m%dT%H%M%S")
        timestamp = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        uid       = f"training-{start_str}-{self.workout_type['name']}@bot"
        desc      = f"Waze: {self.waze_link}" if self.waze_link else ""

        return (
            "BEGIN:VCALENDAR\n"
            "VERSION:2.0\n"
            "PRODID:-//Training Calendar Bot//EN\n"
            "BEGIN:VEVENT\n"
            f"UID:{uid}\n"
            f"DTSTAMP:{timestamp}\n"
            f"DTSTART:{start_str}\n"
            f"DTEND:{end_str}\n"
            f"SUMMARY:{self.workout_type['emoji']} {self.description}\n"
            f"LOCATION:{self.location}\n"
            f"DESCRIPTION:{desc}\n"
            "END:VEVENT\n"
            "END:VCALENDAR"
        )


def parse_training_message(text: str) -> List[Training]:
    trainings: List[Training] = []
    lines = text.splitlines()

    for i, raw in enumerate(lines):
        line = raw.strip()
        if not line:
            continue

        # 1) –ù–∞–π—Ç–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day = next((d for d in DAY_MAPPING if d in line.lower()), None)
        if not day:
            continue

        # 2) –ù–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        tm = re.search(r"(\d{1,2}:\d{2})", line)
        if not tm and i + 1 < len(lines):
            tm = re.search(r"(\d{1,2}:\d{2})", lines[i + 1])
            if tm:
                # ¬´—Å–ª–∏–≤–∞–µ–º¬ª —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å –≤—Å—ë –≤–º–µ—Å—Ç–µ
                line = f"{line} {lines[i+1].strip()}"
        if not tm:
            continue
        time = tm.group(1)

        # 3) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        low = line.lower()
        if (("–ø–ª–∞–≤–∞–Ω" in low or "–º–æ—Ä–µ" in low) and "–±–µ–≥" in low) or ("üèÉ" in line and "üèä" in line):
            workout = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
        elif "–ø–ª–∞–≤–∞–Ω" in low or "üèä" in line:
            workout = WORKOUT_TYPES["–ø–ª–∞–≤–∞–Ω–∏–µ"]
        elif "–≤–µ–ª–æ" in low or "üö¥" in line:
            workout = WORKOUT_TYPES["–≤–µ–ª–æ"]
        else:
            workout = WORKOUT_TYPES["–±–µ–≥"]

        # 4) –õ–æ–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç–æ—á–∫–∏
        rest = line[line.find(time) + len(time):]
        loc_part = rest.split(".", 1)[0]
        m_loc = re.search(r",\s*(.+)$", loc_part)
        location = m_loc.group(1).strip() if m_loc else "Training location"

        # 5) –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤—Å—ë –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –¥–Ω–µ–π –∏ —ç–º–æ–¥–∂–∏
        before = line[: line.find(time)]
        desc = re.sub(
            r"|".join(map(re.escape, DAY_MAPPING)) + r"|[üèÉüèäüö¥üõü]+",
            "",
            before,
            flags=re.IGNORECASE,
        ).strip(" ,:-")
        description = desc or workout["name_ru"]

        # 6) Waze-—Å—Å—ã–ª–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        waze = ""
        if i + 1 < len(lines):
            m_w = re.search(r"https?://waze\.com/[^\s]+", lines[i + 1])
            if m_w:
                waze = m_w.group(0)

        trainings.append(
            Training(day, time, workout, description, location, waze)
        )

    return trainings


async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üèÉ‚Äç‚ôÇÔ∏è *–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫* üèä‚Äç‚ôÄÔ∏è\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–Ø —Å–∞–º —Ä–∞–∑–±–µ—Ä—É –¥–Ω–∏, –≤—Ä–µ–º—è –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Å–∫–∞—á–∞—Ç—å .ics –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n\n"
        "–î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /example."
    )
    await update.message.reply_text(text, parse_mode="Markdown")


async def example_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "*–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:*\n"
        "üèÉ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ–≥: —Ç–µ—Ö–Ω–∏–∫–∞, 19:30, –ë–∞—Ç-–Ø–º.\n"
        "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ https://waze.com/ul/...\n"
        "üö¥ –°—É–±–±–æ—Ç–∞, –≤–µ–ª–æ, 06:00, –†–∞–º–ª–∞."
    )
    await update.message.reply_text(text, parse_mode="Markdown")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text or ""
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äústart‚Äù –±–µ–∑ —Å–ª–µ—à–∞
    if text.strip().lower() in ("start", "—Å—Ç–∞—Ä—Ç"):
        return await start_cmd(update, context)

    trainings = parse_training_message(text)
    if not trainings:
        return await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞—à—ë–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /example –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞."
        )

    # –ó–¥–µ—Å—å –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (.ics –∏ Google —Å—Å—ã–ª–∫–∏)
    # ‚Ä¶

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle, select_all, download –∏ —Ç.–ø.
    # ‚Ä¶

def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("example", example_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.run_polling()


if __name__ == "__main__":
    main()
