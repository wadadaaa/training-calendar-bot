import os
import re
import logging
from datetime import datetime, timedelta
from io import BytesIO
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Bot token (set in environment)
# Make sure to set your BOT_TOKEN as an environment variable
# For example: export BOT_TOKEN='your_token_here'
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Workout type mappings
WORKOUT_TYPES = {
    "–±–µ–≥": {"emoji": "üèÉ", "name": "Running", "name_ru": "–ë–µ–≥"},
    "–ø–ª–∞–≤–∞–Ω–∏–µ": {"emoji": "üèä", "name": "Swimming", "name_ru": "–ü–ª–∞–≤–∞–Ω–∏–µ"},
    "–≤–µ–ª–æ": {"emoji": "üö¥", "name": "Cycling", "name_ru": "–í–µ–ª–æ—Å–∏–ø–µ–¥"},
}

# Day mappings
DAY_MAPPING = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"num": 1, "name": "Monday", "name_ru": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
    "–≤—Ç–æ—Ä–Ω–∏–∫": {"num": 2, "name": "Tuesday", "name_ru": "–í—Ç–æ—Ä–Ω–∏–∫"},
    "—Å—Ä–µ–¥–∞": {"num": 3, "name": "Wednesday", "name_ru": "–°—Ä–µ–¥–∞"},
    "—á–µ—Ç–≤–µ—Ä–≥": {"num": 4, "name": "Thursday", "name_ru": "–ß–µ—Ç–≤–µ—Ä–≥"},
    "–ø—è—Ç–Ω–∏—Ü–∞": {"num": 5, "name": "Friday", "name_ru": "–ü—è—Ç–Ω–∏—Ü–∞"},
    "—Å—É–±–±–æ—Ç–∞": {"num": 6, "name": "Saturday", "name_ru": "–°—É–±–±–æ—Ç–∞"},
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": {"num": 0, "name": "Sunday", "name_ru": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"},
}


class Training:
    def __init__(
        self,
        day_name: str,
        time: str,
        workout_type: dict,
        description: str,
        location: str,
        waze_link: str = "",
    ):
        self.day_name = day_name
        self.time = time
        self.workout_type = workout_type
        self.description = description
        self.location = location
        self.waze_link = waze_link
        self.selected = True
        self.date = self._calculate_date()

    def _calculate_date(self) -> datetime:
        """Calculate the next occurrence of this training day"""
        today = datetime.now()
        # In Python, Monday is 0 and Sunday is 6.
        # We'll adjust our mapping to align with this.
        target_weekday = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3,
            "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
        }.get(self.day_name.lower())

        if target_weekday is None:
            return today # Fallback

        current_weekday = today.weekday()
        days_ahead = target_weekday - current_weekday
        if days_ahead <= 0: # If it's today but passed, or a previous day
            days_ahead += 7
        
        return today + timedelta(days=days_ahead)


    def to_ics(self) -> str:
        """Convert training to ICS format"""
        # Set the correct date and time for the event
        hours, minutes = map(int, self.time.split(":"))
        start_date = self.date.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        
        # Assume training duration is 1 hour and 30 minutes
        end_date = start_date + timedelta(hours=1, minutes=30)

        # Format dates for ICS
        start_str = start_date.strftime("%Y%m%dT%H%M%S")
        end_str = end_date.strftime("%Y%m%dT%H%M%S")
        timestamp = datetime.now().strftime("%Y%m%dT%H%M%SZ")

        # Create a unique ID for the event
        uid = f"training-{start_str}-{self.workout_type['name']}@telegram-bot"

        # Build description, including Waze link if available
        description = self.description
        if self.waze_link:
            description += f"\\n\\nWaze: {self.waze_link}"

        ics_content = f"""BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Training Calendar Bot//EN
BEGIN:VEVENT
UID:{uid}
DTSTAMP:{timestamp}
DTSTART:{start_str}
DTEND:{end_str}
SUMMARY:{self.workout_type['emoji']} {self.workout_type['name_ru']}
LOCATION:{self.location}
DESCRIPTION:{description}
END:VEVENT
END:VCALENDAR"""

        return ics_content

# --- CORRECTED PARSER FUNCTION ---
def parse_training_message(text: str) -> List[Training]:
    """Parse WhatsApp training message and extract training sessions"""
    trainings = []
    lines = text.split("\n")

    i = 0
    while i < len(lines):
        line = lines[i].strip()
        i += 1  # Move to the next line for the next iteration

        if not line:
            continue

        # Look for a day of the week in the current line
        day_match = None
        for day in DAY_MAPPING.keys():
            if day in line.lower():
                day_match = day
                break

        # If a day was found, proceed to find time, location, etc.
        if day_match:
            line_with_day = line
            line_with_time = line
            waze_link_line_index = i

            # Look for time on the current line
            time_match = re.search(r"(\d{1,2}:\d{2})", line_with_time)

            # If time not found, check the next line
            if not time_match and i < len(lines):
                next_line = lines[i].strip()
                time_match = re.search(r"(\d{1,2}:\d{2})", next_line)
                if time_match:
                    line_with_time = next_line
                    waze_link_line_index = i + 1
                    i += 1 # Consume the next line as it's part of this entry

            # If we still can't find a time, skip this entry
            if not time_match:
                logger.warning(f"Found day '{day_match}' but no time on the same or next line.")
                continue

            time = time_match.group(1)
            logger.info(f"Found training: {day_match} at {time}")

            # --- Extract Details ---

            # 1. Workout Type (use the line where the day was found)
            workout_type = {"emoji": "üèÉ", "name": "Training", "name_ru": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"}
            line_lower = line_with_day.lower()
            if ("–ø–ª–∞–≤–∞–Ω" in line_lower or "–º–æ—Ä–µ" in line_lower) and "–±–µ–≥" in line_lower:
                workout_type = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
            elif (("üèÉ" in line_with_day or "üèÉ‚Äç‚ôÇ" in line_with_day or "üèÉ‚Äç‚ôÄ" in line_with_day) and
                  ("üèä" in line_with_day or "üèä‚Äç‚ôÇ" in line_with_day or "üèä‚Äç‚ôÄ" in line_with_day or "üèäüèª‚Äç‚ôÇÔ∏è" in line_with_day)):
                workout_type = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
            elif "–ø–ª–∞–≤–∞–Ω" in line_lower or "üèä" in line_with_day or "üõü" in line_with_day:
                workout_type = {"emoji": "üèä", "name": "Swimming", "name_ru": "–ü–ª–∞–≤–∞–Ω–∏–µ"}
            elif "–≤–µ–ª–æ" in line_lower or "üö¥" in line_with_day:
                workout_type = {"emoji": "üö¥", "name": "Cycling", "name_ru": "–í–µ–ª–æ—Å–∏–ø–µ–¥"}
            elif "–±–µ–≥" in line_lower or "üèÉ" in line_with_day:
                workout_type = {"emoji": "üèÉ", "name": "Running", "name_ru": "–ë–µ–≥"}

            # 2. Location (use the line where the time was found)
            after_time = line_with_time[line_with_time.find(time) + len(time):]
            location_part = after_time.split(".")[0] if "." in after_time else after_time
            location_match = re.search(r",\s*(.+)", location_part) # Made more greedy
            location = location_match.group(1).strip() if location_match else "Training location"

            # 3. Description (use the line where the day was found)
            desc_text = line_with_day
            # If time was on the same line, only take text before it
            if line_with_time is line_with_day:
                 desc_text = line_with_day[: line_with_day.find(time)]
            
            for day_key in DAY_MAPPING.keys():
                desc_text = desc_text.replace(day_key.capitalize(), "").replace(day_key, "")
            desc_text = re.sub(r"[üèÉüèäüö¥üõüüèÉ‚Äç‚ôÇüèäüèª‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄ]+", "", desc_text).strip(" ,:-")
            description = desc_text if desc_text else workout_type["name_ru"]

            # 4. Waze Link (check the line immediately following the time line)
            waze_link = ""
            if waze_link_line_index < len(lines):
                next_line = lines[waze_link_line_index]
                link_match = re.search(r"https://waze\.com/[^\s]+", next_line)
                if link_match:
                    waze_link = link_match.group(0)

            # Create and append the Training object
            trainings.append(Training(
                day_name=day_match,
                time=time,
                workout_type=workout_type,
                description=description,
                location=location,
                waze_link=waze_link,
            ))

    return trainings


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    welcome_message = """
–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ WhatsApp –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. üóìÔ∏è

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –°–∫–æ–ø–∏—Ä—É–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ WhatsApp
2. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
3. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
4. –ü–æ–ª—É—á–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è

*–ö–æ–º–∞–Ω–¥—ã:*
`/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
`/help` - –ü–æ–º–æ—â—å
`/example` - –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üëá
"""
    await update.message.reply_text(welcome_message, parse_mode="Markdown")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = """
*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

1.  *–°–∫–æ–ø–∏—Ä—É–π* –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏–∑ WhatsApp.
2.  *–í—Å—Ç–∞–≤—å* –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ.
3.  –Ø –ø–æ–∫–∞–∂—É –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
4.  *–í—ã–±–µ—Ä–∏* –Ω—É–∂–Ω—ã–µ, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏.
5.  –ù–∞–∂–º–∏ *–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ*.
6.  *–û—Ç–∫—Ä–æ–π* –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ `.ics` —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.

*–°–æ–≤–µ—Ç—ã:*
- –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
- –ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è –∏ –ª–æ–∫–∞—Ü–∏–∏.
- –°—Å—ã–ª–∫–∏ Waze –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5 —á–∞—Å–∞.

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*
üèÉ –ë–µ–≥
üèä –ü–ª–∞–≤–∞–Ω–∏–µ
üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥
üèÉüèä –ë–µ–≥ + –ü–ª–∞–≤–∞–Ω–∏–µ
"""
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def example_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show an example of the expected format"""
    example_text = """
*–ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*
