import os
import re
import logging
from datetime import datetime, timedelta
from io import BytesIO
from typing import List
from urllib.parse import quote

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ‚Äî‚Äî‚Äî Logging ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî Config ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
BOT_TOKEN = os.environ["BOT_TOKEN"]

WORKOUT_TYPES = {
    "–±–µ–≥":      {"emoji": "üèÉ",   "name": "Running",  "name_ru": "–ë–µ–≥"},
    "–ø–ª–∞–≤–∞–Ω–∏–µ": {"emoji": "üèä",   "name": "Swimming", "name_ru": "–ü–ª–∞–≤–∞–Ω–∏–µ"},
    "–≤–µ–ª–æ":     {"emoji": "üö¥",   "name": "Cycling",  "name_ru": "–í–µ–ª–æ—Å–∏–ø–µ–¥"},
}

DAY_MAPPING = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"num": 1, "name_ru": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
    "–≤—Ç–æ—Ä–Ω–∏–∫":     {"num": 2, "name_ru": "–í—Ç–æ—Ä–Ω–∏–∫"},
    "—Å—Ä–µ–¥–∞":       {"num": 3, "name_ru": "–°—Ä–µ–¥–∞"},
    "—á–µ—Ç–≤–µ—Ä–≥":     {"num": 4, "name_ru": "–ß–µ—Ç–≤–µ—Ä–≥"},
    "–ø—è—Ç–Ω–∏—Ü–∞":     {"num": 5, "name_ru": "–ü—è—Ç–Ω–∏—Ü–∞"},
    "—Å—É–±–±–æ—Ç–∞":     {"num": 6, "name_ru": "–°—É–±–±–æ—Ç–∞"},
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": {"num": 0, "name_ru": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"},
}


# ‚Äî‚Äî‚Äî Training model ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
class Training:
    def __init__(
        self,
        day_name: str,
        time: str,
        workout_type: dict,
        description: str,
        location: str,
        waze_link: str = "",
    ):
        self.day_name = day_name
        self.time = time
        self.workout_type = workout_type
        self.description = description
        self.location = location
        self.waze_link = waze_link
        self.selected = True
        self.date = self._calc_date()

    def _calc_date(self) -> datetime:
        today = datetime.now()
        wd = today.weekday()  # 0=Mon ‚Ä¶ 6=Sun
        info = DAY_MAPPING[self.day_name]
        # Telegram: num=0‚ÜíSunday, Python uses 6
        target = 6 if info["num"] == 0 else info["num"] - 1
        delta = (target - wd) % 7 or 7
        return today + timedelta(days=delta)

    def to_ics(self) -> str:
        start = self.date.replace(
            hour=int(self.time.split(":")[0]),
            minute=int(self.time.split(":")[1]),
            second=0,
        )
        end = start + timedelta(hours=1, minutes=30)
        fmt = lambda d: d.strftime("%Y%m%dT%H%M%S")
        uid = f"training-{fmt(start)}-{self.workout_type['name']}@bot"
        desc = f"Waze: {self.waze_link}" if self.waze_link else ""
        lines = [
            "BEGIN:VCALENDAR",
            "VERSION:2.0",
            "PRODID:-//Training Calendar Bot//EN",
            "BEGIN:VEVENT",
            f"UID:{uid}",
            f"DTSTAMP:{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}",
            f"DTSTART:{fmt(start)}",
            f"DTEND:{fmt(end)}",
            f"SUMMARY:{self.workout_type['emoji']} {self.description}",
            f"LOCATION:{self.location}",
            f"DESCRIPTION:{desc}",
            "END:VEVENT",
            "END:VCALENDAR",
        ]
        return "\n".join(lines)

    def to_google_calendar_url(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Calendar"""
        start = self.date.replace(
            hour=int(self.time.split(":")[0]),
            minute=int(self.time.split(":")[1]),
            second=0,
        )
        end = start + timedelta(hours=1, minutes=30)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Google Calendar (UTC)
        fmt = lambda d: d.strftime("%Y%m%dT%H%M%S")
        
        title = f"{self.workout_type['emoji']} {self.description}"
        details = f"üìç –ú–µ—Å—Ç–æ: {self.location}"
        if self.waze_link:
            details += f"\nüó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è: {self.waze_link}"
        
        # URL encoding
        params = {
            'action': 'TEMPLATE',
            'text': title,
            'dates': f"{fmt(start)}/{fmt(end)}",
            'details': details,
            'location': self.location
        }
        
        url_params = "&".join([f"{k}={quote(str(v))}" for k, v in params.items()])
        return f"https://calendar.google.com/calendar/render?{url_params}"


# ‚Äî‚Äî‚Äî Improved Text parser ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def parse_training_message(text: str) -> List[Training]:
    trainings: List[Training] = []
    lines = text.splitlines()

    for i, raw_line in enumerate(lines):
        # 1) –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —ç–º–æ–¥–∂–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        line = re.sub(
            r'^[\u{1F000}-\u{1F9FF}\u{2600}-\u{27BF}\u{FE0F}\u{200D}]+\s*',
            "",
            raw_line,
            flags=re.UNICODE
        ).strip()
        
        if not line:
            continue

        # 2) –ü–æ–∏—Å–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π)
        day = None
        for day_key in DAY_MAPPING.keys():
            if day_key in line.lower():
                day = day_key
                break
        
        if not day:
            continue

        # 3) –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        time_match = re.search(r"(\d{1,2}:\d{2})", line)
        time = None
        combined_line = line
        
        if time_match:
            time = time_match.group(1)
        elif i + 1 < len(lines):
            next_line = lines[i + 1]
            time_match_next = re.search(r"(\d{1,2}:\d{2})", next_line)
            if time_match_next:
                time = time_match_next.group(1)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–∏
                combined_line = f"{line} {next_line.strip()}"
        
        if not time:
            continue

        # 4) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        line_lower = combined_line.lower()
        raw_lower = raw_line.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (("–ø–ª–∞–≤–∞–Ω" in line_lower or "–º–æ—Ä–µ" in line_lower) and "–±–µ–≥" in line_lower) or \
           ("üèÉ" in raw_line and ("üèä" in raw_line or "üõü" in raw_line)):
            workout_type = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
        elif "–ø–ª–∞–≤–∞–Ω" in line_lower or "üèä" in raw_line or "üõü" in raw_line:
            workout_type = WORKOUT_TYPES["–ø–ª–∞–≤–∞–Ω–∏–µ"]
        elif "–≤–µ–ª–æ" in line_lower or "üö¥" in raw_line:
            workout_type = WORKOUT_TYPES["–≤–µ–ª–æ"]
        else:
            workout_type = WORKOUT_TYPES["–±–µ–≥"]

        # 5) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        location = "Training location"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        parts_after_time = combined_line.split(time, 1)
        if len(parts_after_time) > 1:
            after_time = parts_after_time[1].strip()
            
            # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø—è—Ç—É—é –∏ –∏—â–µ–º –ª–æ–∫–∞—Ü–∏—é
            after_time = after_time.lstrip(", ")
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–æ—á–∫–∏ –∏–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
            location_match = re.match(r"([^.]+)", after_time)
            if location_match:
                location_text = location_match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
                location_text = re.sub(r"^[,\s]+", "", location_text)
                if location_text and not location_text.startswith("*"):
                    location = location_text

        # 6) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        before_time = combined_line.split(time, 1)[0]
        
        # –£–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        desc_text = before_time
        for day_key in DAY_MAPPING.keys():
            desc_text = re.sub(day_key, "", desc_text, flags=re.IGNORECASE)
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        desc_text = re.sub(r"[üèÉüèäüö¥üõü‚Äç‚ôÄ‚Äç‚ôÇÔ∏è]+", "", desc_text)
        desc_text = re.sub(r"^[,\s:-]+|[,\s:-]+$", "", desc_text)
        
        description = desc_text.strip() if desc_text.strip() else workout_type["name_ru"]

        # 7) –ü–æ–∏—Å–∫ Waze —Å—Å—ã–ª–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        waze_link = ""
        # –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 3 —Å—Ç—Ä–æ–∫–∞—Ö
        for j in range(i + 1, min(i + 4, len(lines))):
            waze_match = re.search(r"https?://waze\.com/\S+", lines[j])
            if waze_match:
                waze_link = waze_match.group(0)
                break
            # –¢–∞–∫–∂–µ –∏—â–µ–º Google Maps —Å—Å—ã–ª–∫–∏
            google_match = re.search(r"https?://maps\.app\.goo\.gl/\S+", lines[j])
            if google_match:
                waze_link = google_match.group(0)
                break

        # 8) –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training = Training(day, time, workout_type, description, location, waze_link)
        trainings.append(training)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {day} {time} - {description} –≤ {location}")

    return trainings


# ‚Äî‚Äî‚Äî Handlers ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üèÉ‚Äç‚ôÇÔ∏è *–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫* üèä‚Äç‚ôÄÔ∏è\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ‚Äî —è –≤–µ—Ä–Ω—É —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: üì• .ics —Ñ–∞–π–ª—ã, üìÖ Google Calendar, üèÜ TrainingPeaks\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: /example",
        parse_mode="Markdown",
    )


async def example(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "üèÉ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ–≥: —Ç–µ—Ö–Ω–∏–∫–∞, 19:30, –ë–∞—Ç-–Ø–º.\n"
        "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ https://waze.com/ul/...\n"
        "üö¥ –°—É–±–±–æ—Ç–∞, –≤–µ–ª–æ, 06:00, –†–∞–º–ª–∞.\n"
        "üèÉüèä –ü—è—Ç–Ω–∏—Ü–∞, –±–µ–≥ + –ø–ª–∞–≤–∞–Ω–∏–µ, 6:00, –ø–ª—è–∂.",
        parse_mode="Markdown",
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text or ""
    if text.strip().lower() in ("start", "—Å—Ç–∞—Ä—Ç"):
        return await start(update, context)

    sessions = parse_training_message(text)
    if not sessions:
        return await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞—à—ë–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /example\n"
            "–ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è."
        )

    context.user_data["trainings"] = sessions

    kb = []
    for idx, t in enumerate(sessions):
        day_ru = DAY_MAPPING[t.day_name]["name_ru"]
        date = t.date.strftime("%d.%m")
        mark = "‚úÖ" if t.selected else "‚¨ú"
        btn = f"{mark} {t.workout_type['emoji']} {day_ru} {date} ‚Äî {t.time}"
        kb.append([InlineKeyboardButton(btn, callback_data=f"toggle_{idx}")])

    kb.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="select_all"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="deselect_all"),
    ])
    kb.append([
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å .ics", callback_data="download"),
        InlineKeyboardButton("üìÖ Google Calendar", callback_data="google_calendar"),
    ])

    await update.message.reply_text(
        f"–ù–∞—à—ë–ª *{len(sessions)}* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    trainings: List[Training] = context.user_data.get("trainings", [])
    if not trainings:
        return await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")

    cmd = query.data

    if cmd.startswith("toggle_"):
        i = int(cmd.split("_", 1)[1])
        trainings[i].selected = not trainings[i].selected

    elif cmd == "select_all":
        for t in trainings:
            t.selected = True

    elif cmd == "deselect_all":
        for t in trainings:
            t.selected = False

    elif cmd == "download":
        chosen = [t for t in trainings if t.selected]
        if not chosen:
            return await query.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")

        await query.message.reply_text(f"üì• –°–æ–∑–¥–∞—é {len(chosen)} .ics —Ñ–∞–π–ª–∞‚Ä¶")
        for t in chosen:
            data = t.to_ics().encode("utf-8")
            bio = BytesIO(data)
            bio.name = f"{t.workout_type['name'].lower()}_{t.day_name}.ics"

            # —Ä—É—Å—Å–∫–∞—è –¥–∞—Ç–∞
            ds = t.date.strftime("%d %B")
            ru_m = {
                "January":"—è–Ω–≤–∞—Ä—è","February":"—Ñ–µ–≤—Ä–∞–ª—è","March":"–º–∞—Ä—Ç–∞",
                "April":"–∞–ø—Ä–µ–ª—è","May":"–º–∞—è","June":"–∏—é–Ω—è","July":"–∏—é–ª—è",
                "August":"–∞–≤–≥—É—Å—Ç–∞","September":"—Å–µ–Ω—Ç—è–±—Ä—è",
                "October":"–æ–∫—Ç—è–±—Ä—è","November":"–Ω–æ—è–±—Ä—è","December":"–¥–µ–∫–∞–±—Ä—è"
            }
            for en, ru in ru_m.items():
                ds = ds.replace(en, ru)

            cap = (
                f"{t.workout_type['emoji']} *{t.workout_type['name_ru']}*\n"
                f"üìÖ {DAY_MAPPING[t.day_name]['name_ru']}, {ds}\n"
                f"‚è∞ {t.time}\n"
                f"üìç {t.location}"
            )
            await query.message.reply_document(bio, caption=cap, parse_mode="Markdown")

        return await query.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    elif cmd == "google_calendar":
        chosen = [t for t in trainings if t.selected]
        if not chosen:
            return await query.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")

        await query.message.reply_text(f"üìÖ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫–∏ –¥–ª—è {len(chosen)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫‚Ä¶")
        for t in chosen:
            # —Ä—É—Å—Å–∫–∞—è –¥–∞—Ç–∞
            ds = t.date.strftime("%d %B")
            ru_m = {
                "January":"—è–Ω–≤–∞—Ä—è","February":"—Ñ–µ–≤—Ä–∞–ª—è","March":"–º–∞—Ä—Ç–∞",
                "April":"–∞–ø—Ä–µ–ª—è","May":"–º–∞—è","June":"–∏—é–Ω—è","July":"–∏—é–ª—è",
                "August":"–∞–≤–≥—É—Å—Ç–∞","September":"—Å–µ–Ω—Ç—è–±—Ä—è",
                "October":"–æ–∫—Ç—è–±—Ä—è","November":"–Ω–æ—è–±—Ä—è","December":"–¥–µ–∫–∞–±—Ä—è"
            }
            for en, ru in ru_m.items():
                ds = ds.replace(en, ru)

            google_url = t.to_google_calendar_url()
            
            cap = (
                f"{t.workout_type['emoji']} *{t.workout_type['name_ru']}*\n"
                f"üìÖ {DAY_MAPPING[t.day_name]['name_ru']}, {ds}\n"
                f"‚è∞ {t.time}\n"
                f"üìç {t.location}\n\n"
                f"[‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Google Calendar]({google_url})"
            )
            await query.message.reply_text(cap, parse_mode="Markdown", disable_web_page_preview=True)

        return await query.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤—ã! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = []
    for idx, t in enumerate(trainings):
        day_ru = DAY_MAPPING[t.day_name]["name_ru"]
        date = t.date.strftime("%d.%m")
        mark = "‚úÖ" if t.selected else "‚¨ú"
        btn = f"{mark} {t.workout_type['emoji']} {day_ru} {date} ‚Äî {t.time}"
        kb.append([InlineKeyboardButton(btn, callback_data=f"toggle_{idx}")])

    kb.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="select_all"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="deselect_all"),
    ])
    kb.append([
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å .ics", callback_data="download"),
        InlineKeyboardButton("üìÖ Google Calendar", callback_data="google_calendar"),
    ])

    await query.edit_message_text(
        f"–ù–∞—à—ë–ª *{len(trainings)}* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )


# ‚Äî‚Äî‚Äî Entry point ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("example", example))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("üöÄ Training Calendar Bot –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
