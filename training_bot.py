import re
from typing import List
from datetime import datetime

def parse_training_message(text: str) -> List[Training]:
    trainings: List[Training] = []
    lines = text.splitlines()

    for i, raw in enumerate(lines):
        # 1) –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–º–æ–¥–∂–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–ª–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        #    –ó–∞–æ–¥–Ω–æ —Å–¥–≤–∏–Ω–µ–º —Ç–µ–∫—Å—Ç –∫ –Ω–∞—á–∞–ª—É.
        line = re.sub(r'^(?:[\U0001F300-\U0001FAFF\u2600-\u27BF]+\uFE0F?)+\s*', '', raw).strip()
        if not line:
            continue

        # 2) –ò—â–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day_match = next((d for d in DAY_MAPPING if d in line.lower()), None)
        if not day_match:
            continue

        # 3) –ò—â–µ–º –≤—Ä–µ–º—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
        tm = re.search(r'(\d{1,2}:\d{2})', line)
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–ª–∏–≤–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π
        if not tm and i + 1 < len(lines):
            nxt = lines[i+1].strip()
            tm2 = re.search(r'(\d{1,2}:\d{2})', nxt)
            if tm2:
                tm = tm2
                line = f"{line} {nxt}"
        if not tm:
            continue
        time = tm.group(1)

        # 4) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (workout_type)
        low = line.lower()
        if (("–ø–ª–∞–≤–∞–Ω" in low or "–º–æ—Ä–µ" in low) and "–±–µ–≥" in low):
            workout_type = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
        elif "üèÉ" in raw and "üèä" in raw:
            workout_type = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
        elif "–ø–ª–∞–≤–∞–Ω" in low or "üèä" in line:
            workout_type = WORKOUT_TYPES["–ø–ª–∞–≤–∞–Ω–∏–µ"]
        elif "–≤–µ–ª–æ" in low or "üö¥" in line:
            workout_type = WORKOUT_TYPES["–≤–µ–ª–æ"]
        else:
            workout_type = WORKOUT_TYPES["–±–µ–≥"]

        # 5) –õ–æ–∫–∞—Ü–∏—è
        after = line.split(time, 1)[1]
        loc_part = after.split(".", 1)[0]
        m_loc = re.search(r',\s*(.+)$', loc_part)
        location = m_loc[1].strip() if m_loc else "Training location"

        # 6) –û–ø–∏—Å–∞–Ω–∏–µ
        before = line.split(time, 1)[0]
        desc = re.sub(
            r"|".join(map(re.escape, DAY_MAPPING.keys())) + r"|[üèÉüèäüö¥üõü]+",
            "",
            before,
            flags=re.IGNORECASE,
        ).strip(" ,:-")
        description = desc or workout_type["name_ru"]

        # 7) –°—Å—ã–ª–∫–∞ Waze –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
        waze = ""
        if i + 1 < len(lines):
            m_w = re.search(r'https?://waze\.com/\S+', lines[i+1])
            if m_w:
                waze = m_w.group(0)

        trainings.append(
            Training(
                day_name=day_match,
                time=time,
                workout_type=workout_type,
                description=description,
                location=location,
                waze_link=waze,
            )
        )

    return trainings
