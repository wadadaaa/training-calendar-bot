import os
import re
import logging
from datetime import datetime, timedelta
from io import BytesIO
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ‚Äî‚Äî‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
BOT_TOKEN = os.environ["BOT_TOKEN"]

WORKOUT_TYPES = {
    "–±–µ–≥":      {"emoji": "üèÉ",   "name": "Running",  "name_ru": "–ë–µ–≥"},
    "–ø–ª–∞–≤–∞–Ω–∏–µ": {"emoji": "üèä",   "name": "Swimming", "name_ru": "–ü–ª–∞–≤–∞–Ω–∏–µ"},
    "–≤–µ–ª–æ":     {"emoji": "üö¥",   "name": "Cycling",  "name_ru": "–í–µ–ª–æ—Å–∏–ø–µ–¥"},
}

DAY_MAPPING = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"num": 1, "name_ru": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
    "–≤—Ç–æ—Ä–Ω–∏–∫":     {"num": 2, "name_ru": "–í—Ç–æ—Ä–Ω–∏–∫"},
    "—Å—Ä–µ–¥–∞":       {"num": 3, "name_ru": "–°—Ä–µ–¥–∞"},
    "—á–µ—Ç–≤–µ—Ä–≥":     {"num": 4, "name_ru": "–ß–µ—Ç–≤–µ—Ä–≥"},
    "–ø—è—Ç–Ω–∏—Ü–∞":     {"num": 5, "name_ru": "–ü—è—Ç–Ω–∏—Ü–∞"},
    "—Å—É–±–±–æ—Ç–∞":     {"num": 6, "name_ru": "–°—É–±–±–æ—Ç–∞"},
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": {"num": 0, "name_ru": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"},
}


# ‚Äî‚Äî‚Äî –ú–æ–¥–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
class Training:
    def __init__(
        self,
        day_name: str,
        time: str,
        workout_type: dict,
        description: str,
        location: str,
        waze_link: str = "",
    ):
        self.day_name = day_name
        self.time = time
        self.workout_type = workout_type
        self.description = description
        self.location = location
        self.waze_link = waze_link
        self.selected = True
        self.date = self._calc_date()

    def _calc_date(self) -> datetime:
        today = datetime.now()
        wd = today.weekday()  # 0=Mon ‚Ä¶ 6=Sun
        info = DAY_MAPPING[self.day_name]
        # Telegram: num=0‚ÜíSunday, Python uses 6
        target = 6 if info["num"] == 0 else info["num"] - 1
        delta = (target - wd) % 7 or 7
        return today + timedelta(days=delta)

    def to_ics(self) -> str:
        start = self.date.replace(
            hour=int(self.time.split(":")[0]),
            minute=int(self.time.split(":")[1]),
            second=0,
        )
        end = start + timedelta(hours=1, minutes=30)
        fmt = lambda d: d.strftime("%Y%m%dT%H%M%S")
        uid = f"training-{fmt(start)}-{self.workout_type['name']}@bot"
        desc = f"Waze: {self.waze_link}" if self.waze_link else ""
        lines = [
            "BEGIN:VCALENDAR",
            "VERSION:2.0",
            "PRODID:-//Training Calendar Bot//EN",
            "BEGIN:VEVENT",
            f"UID:{uid}",
            f"DTSTAMP:{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}",
            f"DTSTART:{fmt(start)}",
            f"DTEND:{fmt(end)}",
            f"SUMMARY:{self.workout_type['emoji']} {self.description}",
            f"LOCATION:{self.location}",
            f"DESCRIPTION:{desc}",
            "END:VEVENT",
            "END:VCALENDAR",
        ]
        return "\n".join(lines)


# ‚Äî‚Äî‚Äî –ü–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def parse_training_message(text: str) -> List[Training]:
    trainings: List[Training] = []
    lines = text.splitlines()

    for i, raw in enumerate(lines):
        # 1) –û–±—Ä–µ–∑–∞–µ–º –ª—é–±—ã–µ —ç–º–æ–¥–∂–∏ –≤ –Ω–∞—á–∞–ª–µ (Zwj, VS16 –∏ —Ç.–¥.)
        line = re.sub(
            r'^(?:[\U0001F300-\U0001FAFF\u2600-\u27BF]+\uFE0F?)+\s*',
            "",
            raw,
        ).strip()
        if not line:
            continue

        # 2) –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day = next((d for d in DAY_MAPPING if d in line.lower()), None)
        if not day:
            continue

        # 3) –í—Ä–µ–º—è –≤ —ç—Ç–æ–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        tm = re.search(r"(\d{1,2}:\d{2})", line)
        if not tm and i + 1 < len(lines):
            tm2 = re.search(r"(\d{1,2}:\d{2})", lines[i + 1])
            if tm2:
                tm = tm2
                line = f"{line} {lines[i + 1].strip()}"
        if not tm:
            continue
        time = tm.group(1)

        # 4) –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        low = line.lower()
        if (("–ø–ª–∞–≤–∞–Ω" in low or "–º–æ—Ä–µ" in low) and "–±–µ–≥" in low) or ("üèÉ" in raw and "üèä" in raw):
            wt = {"emoji": "üèÉüèä", "name": "Run+Swim", "name_ru": "–ë–µ–≥+–ü–ª–∞–≤–∞–Ω–∏–µ"}
        elif "–ø–ª–∞–≤–∞–Ω" in low or "üèä" in line:
            wt = WORKOUT_TYPES["–ø–ª–∞–≤–∞–Ω–∏–µ"]
        elif "–≤–µ–ª–æ" in low or "üö¥" in line:
            wt = WORKOUT_TYPES["–≤–µ–ª–æ"]
        else:
            wt = WORKOUT_TYPES["–±–µ–≥"]

        # 5) –õ–æ–∫–∞—Ü–∏—è (–ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç–æ—á–∫–∏)
        after = line.split(time, 1)[1]
        loc = after.split(".", 1)[0]
        m_loc = re.search(r",\s*(.+)$", loc)
        location = m_loc.group(1).strip() if m_loc else "Training location"

        # 6) –û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ –≤—Ä–µ–º–µ–Ω–∏, –±–µ–∑ –¥–Ω—è –∏ —ç–º–æ–¥–∂–∏)
        before = line.split(time, 1)[0]
        desc = re.sub(
            r"|".join(map(re.escape, DAY_MAPPING.keys())) + r"|[üèÉüèäüö¥üõü]+",
            "",
            before,
            flags=re.IGNORECASE,
        ).strip(" ,:-")
        description = desc or wt["name_ru"]

        # 7) Waze –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        wlink = ""
        if i + 1 < len(lines):
            m = re.search(r"https?://waze\.com/\S+", lines[i + 1])
            if m:
                wlink = m.group(0)

        trainings.append(Training(day, time, wt, description, location, wlink))

    return trainings


# ‚Äî‚Äî‚Äî Handlers ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üèÉ‚Äç‚ôÇÔ∏è *–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫* üèä‚Äç‚ôÄÔ∏è\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ‚Äî —è –≤–µ—Ä–Ω—É .ics —Ñ–∞–π–ª—ã.\n"
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: /example",
        parse_mode="Markdown",
    )


async def example(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "üèÉ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ–≥: —Ç–µ—Ö–Ω–∏–∫–∞, 19:30, –ë–∞—Ç-–Ø–º.\n"
        "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ https://waze.com/ul/...\n"
        "üö¥ –°—É–±–±–æ—Ç–∞, –≤–µ–ª–æ, 06:00, –†–∞–º–ª–∞.",
        parse_mode="Markdown",
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text or ""
    if text.strip().lower() in ("start", "—Å—Ç–∞—Ä—Ç"):
        return await start(update, context)

    sessions = parse_training_message(text)
    if not sessions:
        return await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /example.")

    context.user_data["trainings"] = sessions

    # inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = []
    for idx, t in enumerate(sessions):
        day_ru = DAY_MAPPING[t.day_name]["name_ru"]
        date = t.date.strftime("%d.%m")
        mark = "‚úÖ" if t.selected else "‚¨ú"
        btn = f"{mark} {t.workout_type['emoji']} {day_ru} {date} ‚Äî {t.time}"
        kb.append([InlineKeyboardButton(btn, callback_data=f"toggle_{idx}")])

    kb.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="select_all"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="deselect_all"),
    ])
    kb.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data="download")])

    await update.message.reply_text(
        f"–ù–∞—à—ë–ª *{len(sessions)}* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    trainings: List[Training] = context.user_data.get("trainings", [])
    if not trainings:
        return await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")

    cmd = query.data

    if cmd.startswith("toggle_"):
        i = int(cmd.split("_", 1)[1])
        trainings[i].selected = not trainings[i].selected

    elif cmd == "select_all":
        for t in trainings:
            t.selected = True

    elif cmd == "deselect_all":
        for t in trainings:
            t.selected = False

    elif cmd == "download":
        chosen = [t for t in trainings if t.selected]
        if not chosen:
            return await query.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")

        await query.message.reply_text(f"üì• –°–æ–∑–¥–∞—é {len(chosen)} .ics —Ñ–∞–π–ª–∞‚Ä¶")
        for t in chosen:
            data = t.to_ics().encode("utf-8")
            bio = BytesIO(data)
            bio.name = f"{t.workout_type['name'].lower()}_{t.day_name}.ics"

            # —Ä—É—Å—Å–∫–∞—è –¥–∞—Ç–∞
            ds = t.date.strftime("%d %B")
            ru_m = {
                "January":"—è–Ω–≤–∞—Ä—è","February":"—Ñ–µ–≤—Ä–∞–ª—è","March":"–º–∞—Ä—Ç–∞",
                "April":"–∞–ø—Ä–µ–ª—è","May":"–º–∞—è","June":"–∏—é–Ω—è","July":"–∏—é–ª—è",
                "August":"–∞–≤–≥—É—Å—Ç–∞","September":"—Å–µ–Ω—Ç—è–±—Ä—è",
                "October":"–æ–∫—Ç—è–±—Ä—è","November":"–Ω–æ—è–±—Ä—è","December":"–¥–µ–∫–∞–±—Ä—è"
            }
            for en, ru in ru_m.items():
                ds = ds.replace(en, ru)

            cap = (
                f"{t.workout_type['emoji']} *{t.workout_type['name_ru']}*\n"
                f"üìÖ {DAY_MAPPING[t.day_name]['name_ru']}, {ds}\n"
                f"‚è∞ {t.time}\n"
                f"üìç {t.location}"
            )
            await query.message.reply_document(bio, caption=cap, parse_mode="Markdown")

        return await query.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ toggle/select change
    kb = []
    for idx, t in enumerate(trainings):
        day_ru = DAY_MAPPING[t.day_name]["name_ru"]
        date = t.date.strftime("%d.%m")
        mark = "‚úÖ" if t.selected else "‚¨ú"
        btn = f"{mark} {t.workout_type['emoji']} {day_ru} {date} ‚Äî {t.time}"
        kb.append([InlineKeyboardButton(btn, callback_data=f"toggle_{idx}")])

    kb.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="select_all"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –≤—Å—ë", callback_data="deselect_all"),
    ])
    kb.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data="download")])

    await query.edit_message_text(
        f"–ù–∞—à—ë–ª *{len(trainings)}* —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )


# ‚Äî‚Äî‚Äî Entry point ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("example", example))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º polling
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
